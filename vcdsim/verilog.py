# Copyright 2021 Charles-Henri Mousset
#
# License: BSD (see LICENSE)
#
# Verilator is a high performance Verilog simulator. It can be called by vcdsim directly.

from datetime import datetime

verilog_header = """/*
{comment}
*/

`timescale {timescale}/{timescale}
module {modulename}
(
{ios}
);

"""

verilog_footer = "endmodule"


def gen_verilog_tb(vcd, file_path, modulename='vcdsim', ignore_invalid=False, write_changes=True):
    date = datetime.now()
    comment = "\n".join([
        f"generated by vcdsim on {date}",
        f"path: {vcd.path}",
    ])
    sigs = {k: '_'.join(vcd.signals_symbols[k]) for k in vcd.signals_symbols}
    ios = ['    output reg ' + sigs[k] for k in sigs]
    with open(file_path, 'w') as f:
        f.write(verilog_header.format(
            comment=comment,
            modulename=modulename,
            timescale=vcd.keywords['timescale'],
            ios=",\n".join(ios)
        ))

        if write_changes:
            f.write("initial begin\n")
            for chg in vcd.changes_raw:
                firstc = chg[0]
                if firstc in ('0', '1'):
                    f.write(sigs[chg[1:]] + '=' + firstc + ";\n")
                elif firstc in ('x', 'X', 'z', 'Z'):
                    f.write(sigs[chg[1:]] + '=\'b' + firstc + ";\n")
                elif firstc in ('b', 'B'):
                    val, tok = chg.split()
                    f.write(sigs[tok] + '=\'' + val + ";\n")
                elif firstc == '#':
                    f.write(chg + ";\n")
                elif ignore_invalid:
                    pass
                else:
                    raise ValueError(f"'{chg}' is not a value supported by migen simulator")

            f.write("end\n\n")
        f.write("endmodule")
