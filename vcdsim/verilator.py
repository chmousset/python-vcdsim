# Copyright 2021 Charles-Henri Mousset
#
# License: BSD (see LICENSE)
#
# Verilator is a high performance Verilog simulator. It can be called by vcdsim directly.

from datetime import datetime
import re

cpp_header = """/*
{comment}
*/

#include <stdio.h>
#include <stdlib.h>
#include "V{module_name}.h"
#include "verilated.h"

int main(int argc, char **argv) {{
Verilated::commandArgs(argc, argv);
V{module_name} *tb = new V{module_name};

"""


def gen_verilator_tb(vcd, file_path, modulename, clock_freq, ignore_invalid=False,
                     replace_invalid=-1):
    date = datetime.now()
    comment = "\n".join([
        f"generated by vcdsim on {date}",
        f"path: {vcd.path}",
    ])
    sigs = {k: '_'.join(vcd.signals_symbols[k]) for k in vcd.signals_symbols}

    ts = 1/clock_freq
    ts_keyword = vcd.keywords['timescale'].lower()
    ts_vcd = 0
    if 'ns' in ts_keyword:
        ts_vcd = 1e-9 * int(re.sub(r'[^\d-]+', '', ts_keyword))
    elif 'ps' in ts_keyword:
        ts_vcd = 1e-12 * int(re.sub(r'[^\d-]+', '', ts_keyword))
    elif 'us' in ts_keyword:
        ts_vcd = 1e-6 * int(re.sub(r'[^\d-]+', '', ts_keyword))

    if ts_vcd == 0:
        raise ValueError(f"unsupported timescale {ts_keyword}")

    with open(file_path, 'w') as f:
        f.write(cpp_header.format(
            comment=comment,
            module_name=modulename))

        vcd_t = 0
        sim_t = 0
        for chg in vcd.changes_raw:
            firstc = chg[0]
            if firstc in ('0', '1'):
                f.write('tb->' + sigs[chg[1:]] + '=' + firstc + ";\n")
            elif firstc in ('x', 'X', 'z', 'Z'):
                if replace_invalid != -1:
                    f.write(sigs[chg[1:]] + '=' + str(replace_invalid) + ";\n")
                else:
                    raise ValueError(f"value invalid {chg}")
            elif firstc in ('b', 'B'):
                if 'x' in chg[1:]:
                    if replace_invalid != -1:
                        chg = chg.replace('x', str(replace_invalid))
                    elif ignore_invalid:
                        continue
                    else:
                        raise ValueError(f"value invalid {chg}")
                val, tok = chg.split()
                f.write('tb->' + sigs[tok] + '=0' + val + ";\n")
            elif firstc == '#':
                vcd_t = int(chg[1:]) * ts_vcd
                cnt = 0
                while sim_t <= vcd_t:
                    cnt += 1
                    sim_t += ts
                if cnt < 4:
                    for _ in range(cnt):
                        f.write("tb->eval();\n")
                else:
                    f.write(f"for(i=0;i<{cnt};i++){{tb->eval();}};\n")
            elif ignore_invalid:
                pass
            else:
                raise ValueError(f"'{firstc}' is not a value supported by migen simulator")
        f.write("}\n")
